## Cours de programmation pour la SNT en 2nd
## =========================================

## Note: ce document est un notebook jupyter qui inclut du code
## en python. Si vous arrivez dessus depuis le moodle du lycée,
## vous êtes sur le site [basthon.fr](https://basthon.fr). Ce document est interactif,
## Il faut modifier et jouer avec les exemples.
##
## En haut à gauche deux icônes,
## * une disquette (vous savez ce que c'est ?), pour sauvegarder votre fichier
##   sur votre ordinateur
## * un dossier pour recharger un fichier précédemment sauvegardé.

## Qu'est ce qu'un programme ?
## ---------------------------

def suivant_syracuse(n):
    if n % 2 == 0:
        return(n//2)
    else:
        return(3*n+1)

## Cet exemple est une fonction, c'est un programme qui calcule un entier...
## Il sert surtout à cacher la réponse à la question pour qu'on discute...

## **Un programme** est une suite d'instructions à exécuter sur un ordinateur
## pour faire des calculs et interagir avec le monde extérieur (entrée/sortie)
## Voici quelques interactions possibles:
## * sauvegarder des données dans un fichier
## * sauvegarder des données dans une base de données
## * afficher des choses sur l'écran
## * communiquer avec des serveurs
## * communiquer avec d'autres programmes
## * ...

## Avec les éléments du programme scolaire de SNT, on verra surtout la partie
## calcul ... Mais un programme qui n'interagit pas avec l'extérieur ne sert à
## rien!

## Différence entre **algorithme** et **programme** ... Il n'y en a pas!!!  par
## contre, il y a des langages de programmation (en général pas très bien
## définis) qui s'adressent aux humains pour donner une procédure de calcul et des
## langages de programmation réels qui s'adressent aux ordinateurs et qui doivent
## être très bien définis.

## En seconde, on fait du **python**. Il y a des milliers de langages de
## programmation, dont des langages généraux comme python, C, C++, Java, OCaml,
## Rust, Haskell, Prolog, ...  et des langages spécialisées comme SQL, HTML,
## CSS, ... ça peut faire peur, mais une fois que l'on a appris un concept dans
## un langage de programmation, il n'y a que la syntaxe qui change quand on
## change de langage et ce n'est en général pas très compliqué.

## Les entiers
## -----------

## Python manipule des entiers de taille arbitraire. C'est un des rares langages
## qui utilise par défaut ce type d'entiers. Les autres langages utilisent en
## général des entiers 64 bits ou 32 bits. Les entiers de python sont plus lent
## mais correspondent aux vrais entiers des mathématiques. Pour écrire un entier
## en python, on peut l'écrire en base 10 (décimal), 2 (binaire), 8 (octal) ou
## 16 (héxadécimal). Par contre, par défaut, python affiche les entiers en
## décimal.

(0b101010, 0o52, 42, 0x2A)

## Attention, il n'est pas nécessaire de savoir faire la conversion, c'est python
## qui la fait pour vous. Par contre, parfois un entier s'écrit naturellement
## dans une base plutôt qu'une autre. C'est par exemple le cas des code couleur RGB
## (rouge, vers, bleu) qui se réprente en Hexadécimal, avec deux chiffres par couleur.
## ``0xFF0000`` désigne le bleu, ``0x00FF00`` désigne le vert, ``0000FF`` désigne le rouge.
## En décimal, on y comprendrait rien.

## Changez la première ligne ci-dessous pour explorer la conversion entre code et  couleurs

color = 0xFF0000
# Code qui crée une image avec un rectangle utilisant la couleur ci-dessus.
from PIL import Image, ImageDraw
img = Image.new("RGB", (100, 100))
img1 = ImageDraw.Draw(img)
img1.rectangle([(0, 0), (100, 100)], fill = color)
img

## Attention, ce sont les mêmes entiers, pas de conversion nécessaire, c'est
## juste des écritures différentes. On peut utiliser ``_`` pour rendre les
## entiers plus lisibles:

(1_000_000_000, 1000000000)

## Voici les opérations que python connaît sur les entiers:
## * Addition et soustraction
(2+3, 2-3)
## * opposé
-3
## * Multiplication
2*3
## * Division euclidienne (quotient et reste)
(7//3, 7%3)
## * Valeur absolue
abs(-42)
## * Puissance
2**100

## Il y a d'autres fonctions, par exemple pour manipuler les entiers bit à bit...
## Mais on va s'arrêter là.

## On peut construire des expressions mathématiques compliquées, avec les
## priorités habituelles (dans le doute, mettez plus de parenthèses):

((2 + 3 * 5) * 42) % (3 ** 7)

## Les fonctions
## -------------

## En math, une fonction est une boite noire qui prend une valeur et renvoie une
## valeur. Exemples:
##
## * $f: \mathbb R \to \mathbb R, f(x) = x^2 - x + 1$ prend un nombre réel $x$
## en argument et retourne $x^2+1$ comme résultat.
##
## * Une transformation du plan (translation, rotation, ...) est une fonction
## qui prend un point du plan en argument et retourne un autre point du plan
## (ou parfois le même)
## * Une suite est une fonction qui prend en argument un entier et renvoie un
## nombre réel.

## En informatique, une fonction est une suite d'instructions que l'on peut
## réutiliser autant de fois que l'on veut, en changeant la valeur d'une ou
## plusieurs variable (les paramètres).  Cette suite d'instructions peut renvoyer
## une valeur ou pas.

## Différence avec les maths
## * En math, au lycée, les fonctions ont en général un seul argument (ce n'est plus vrai après).

## * En informatique, les fonctions viennent avec le mode de calcul. En math, ce
## n'est pas toujours vrai, et il y a même des fonctions non calculables (on
## démontre qu'il n'y a pas de programme pour les calculer).

## * En informatique les fonctions peuvent avoir des interactions avec le monde
## extérieur (on parle d'effets de bord). Dans ce cas, le résultat d'une
## fonction ne dépend pas uniquement des arguments de la fonction.

## Voici la définition d'une fonction qui calcule $x^{10}$ sans utiliser la fonction puissance de python.

def puissance10(x):
    return x*x*x*x*x*x*x*x*x*x

## et une utilisation de cette fonction (on parle d'appel de la function):

puissance10(10)

## Analysons la syntaxe:
## * ``def`` est un mot clef de python qui indique que ce qui suit est une
## définition de fonction.
## * puissance10 est le nom de la fonction.
## * x (qui doit être entre parenthèse) est le paramètre de la fonction. On ne
## connaît pas sa valeur au moment où l'on définit la fonction, sa valeur sera
## connue et changera à chaque utilisation (appel) de la fonction.
## * après les ``:`` viennent les instructions pour le calcul de la fonction.
## Elles utilisent en général ``x``.
## * le mot clef ``return`` indique que le calcul de la fonction est terminé et
## donne la valeur qu'il faut renvoyer. Après ``return``, la fonction est terminée,
## les lignes après ``return`` ne sera jamais exécutée.
## * dans l'appel de la function, on donne simplement le nom de la fonction et
## la valeur de son argument.

## La définition de la fonction ne fait rien! Python se rappelle juste de la
## définition quelque-part dans sa mémoire.  Par contre, à chaque fois que l'on
## appel la fonctions, ses instructions sont exécutées avec la valeur fournie
## pour le paramètre. Ainsi,

puissance10(1) + puissance10(3) == 1*1*1*1*1*1*1*1*1*1 + 3*3*3*3*3*3*3*3*3*3

## Comme indiqué plus haut, une fonction peut avoir plusieurs arguments comme

def moyenne1(a,b):
    return (a+b)/2

moyenne(4,6)

## Remarque: en python, il n'y a pas d'analyse du code (sauf la vérification de
## la syntaxe) et une définition de fonction ne fait rien, comme dit plus
## haut. Une fonction peut donc appeler une autre fonction définie après. Ce
## n'est qu'au moment d'un appel de fonction qu'une fonction non définie
## provoquera une erreur. Une fonction peux même s'appeler elle même, on parle
## alors de fonction récursive.

def fibonacci(n):
    if n <= 0: return 1
    else: return fibonacci(n-1) + fibonacci(n-2)

print(fibonacci(0))
print(fibonacci(1))
print(fibonacci(2))
print(fibonacci(3))
print(fibonacci(4))

## Sans ``if`` (que l'on explique plus bas), une fonction qui s'appelle elle
## même ne s'arrête jamais.

## Remarque: les fonctions récursives sont au programme de terminale en NSI
## ... Mais ce n'est pas plus compliqué que les boucles et surtout, il me semble
## très important d'apprendre en même les boucles et les fonctions récursives.

## Les blocs indentés
## ------------------

## Python utilise la décalage du code vers la droite pour délimiter la fin de la
## fonction. Toutes les lignes qui commence plus à droite que le ``def`` sont
## dans la fonction.

## On peut utiliser le décalage que l'on veut, mais on doit utiliser le même
## décalage pour toutes les lignes. Attention, on peut utiliser des espaces ou des tabulations
## pour décaler les lignes et ça peut poser des problèmes si on mélange.

## Les blocs sont aussi utilisés pour les boucles et les conditionnels. Il y aura donc des blocs dans les
## bloc. Les blocs sont toujours introduit par une ligne qui termine avec ``:``. Les blocs d'une seule ligne
## peuvent être mis sur la même ligne juste après les ``:``.

## Voici un exemple avec des blocs imbriqués:

def f(x):
    #début du 1er bloc
    if x = 0:
        # début du 2nd bloc
        return 3
        # fin du 2nb bloc
    else:
        # début du 3e bloc
        if x = 1:
            # début du 4e bloc
            return 42
            # fin du 4e bloc
        else: return 73 #un 5e bloc sur une ligne
        # fin du 3e bloc
    #fin du 1er bloc

## Les variables
## -------------

## Les variables sont extrêmement importantes en programmation. Elles permettent
## de donner un nom à une valeur pour l'utiliser plus tard. Elles sont aussi
## utilisées pour recevoir les arguments d'une fonction.

def f(x):            #1
    y = x * x        #2
    y = y * y        #3
    return x *y * y  #4
print(f(2))          #5
print(f(3))          #6

## Lorsque l'on exécute ce code, on passe par les étapes suivantes:
## * Python lit les ligne 1 à 4 et stocke la définition de la fonction `f`.
## * La ligne 5 appelle la fonction `f` et on passe à la ligne 1 avec `x` qui a pour valeur 2.
## * La ligne 2 définit `y` avec la valeur $2\times 2 = 4$.
## * La ligne 3 change `y` avec la valeur $4\times 4 = 16$.
## * La ligne 4 termine le calcul de `f(2)` qui renvoie $2\times 16 \times 16 = 512$.
## * On revient à la ligne 5 pour évaluer `print(512)` qui s'affiche.
## * La ligne 6 appelle la fonction `f` et on passe à la ligne 1 avec `x` qui a pour valeur 3.
## * La ligne 2 définit `y` avec la valeur $3\times 3 = 9$.
## * La ligne 3 change `y` avec la valeur $9\times 9 = 81$.
## * La ligne 4 termine le calcul de `f(3)` qui renvoie $3\times 81 \times 81 = 19683.
## * On revient à la ligne 6 pour évaluer `print(19683)`qui s'affiche.

## Ce site permet d'exécuter du code python en visualisant l'évolution de la
## valeur des variables:
## [pythontutor.com](https://pythontutor.com/visualize.html#mode=edit). Copie le
## code ci-dessus dans ce site et visualise l'exécution.

## Remarque: en mathématique, les variables ne changent pas de valeur. La ligne
## `y = y * y` est une équation en mathématique alors qu'elle change la valeur
## de `y` en python. Il y a des langages de programmation, comme `OCaml`, qui
## n'autorisent pas de changer la valeur d'une variable.

## *Attention* les paramètres de la fonction et les variables définis dans cette
## fonction ne sont visibles qu'à l'intérieur de la fonction. On parle de _variables locales_. Python possède
## aussi des variables _globales_ définies à l'extérieur des fonctions et qui sont
## différentes des variables _locales_ des fonctions.

x = 2
y = 3
def f(x):
  y = x*x
  return y
def g(x):
  y = x+x
  return y
z=f(y)*g(y)+f(x)
print(x,y,z)

## Ce programme possède trois variable `x` et `y` différentes:
## * des globales définies aux deux premières lignes,
## * celles de `f` et
## * celles de `g`.

## À la fin de l'exécution de ce programme, les variables globales `x` et `y`
## vallent toujours 2 et 3 et `z` vaut $(3 \times 3) \times (3 + 3) + (2 \times
## 2) = 58$.

## Print
## -----

## Attention, ``print`` provoque juste un affichage. Il ne faut pas le confondre
## avec ``return`` qui arrête le calcul d'une fonction et renvoie la valeur
## indiqué comme résultat de la fonction.

## ``print`` doit surtout être utilisé pour rechercher les erreurs dans votre
## code, et parfois comme interface utilisateur (quand on échange du texte avec
## l'utilisateur).

## En python, ``print`` peut afficher des valeurs de n'importe quel type,
## plusieurs à la fois.  On peut controler le séparateur et le fait d'aller à la
## ligne.
def f(x): return x
print(1,True,f)
print(2,True,f,end="")
print(3,True,f,sep=",",end="")
print(4,True,f,sep=",")

## La confusion entre ``print`` et ``return`` est encouragé par l'utilisation du
## notebook qui fait un affichage du résultat de la dernière ligne. Dans un notebook,
## le programme qui suit affiche $42$, si on le lance avec un vrai interprète python,
## il n'affiche rien du tout. Cela peut faire croire que ``return`` provoque un affichage
## et que c'est la même chose que ``print``

def f(x): return x+1
f(2)

## En fait, le notebook transforme automatiquement le programme précédent en:

def f(x): return x+1
print f(2)

## Les booléens
## ------------

## Les booléens sont très importants, car il servent dans les instructions
## conditionnelles pour choisir ce que l'on va faire. Il y a deux booléens pour
## désigner le vrai et le faux:
True
##
False

## Python possède des fonctions de comparaison qui prennent deux entiers, deux
## flottants, deux séquences, ... et renvoie un booléen:
## * égal
(2 == 4, 2 == 2, True == False, True == True)
## * différent
(2 != 4, 2 != 2, True != False, True != True)
## * inférieur
(2 < 4, 2 < 2, True < False, True < True)
## * inférieur ou égal
(2 <= 4, 2 <= 2, True <= False, True <= True)
## * supérieur
(2 > 4, 2 > 2, True > False, True > True)
## * supérieur ou égal
(2 >= 4, 2 >= 2, True >= False, True >= True)

## Python possève aussi des functions sur les booléens:
## * négation
(not True, not False)
## * conjonction (le et)
(True and True, True and False, False and True, False and False)
## * disjonction (le ou)
(True or True, True or False, False or True, False or False)

## L'instruction conditionnelle
## --------------------------

## Il est indispensable de pouvoir executer du code sous condition.
## La conditionnelle ``if`` permet d'exécuter du code que si une condition
## (exprimée par un booléen) est vrai.

## La syntaxe est la suivante, changez ``b`` pour voir ce qui se passe:
b = True
if b:
    print('cas vrai sans else')

if b:
    print('cas vrai avec else')
else:
    print('cas faux avec else')

## la condition peut être une expression compliquée:
(x,y) = (2,3)
if x < 5 or y > 2:
    print("coucou")

## ATTENTION: on ne dit pas la «boucle if»!

## Les nombres flottants
## ---------------------

## Les nombres flottants correspondent aux nombres utilisés par vos
## calculatrices scientifiques. On les écrit de la même manière, mais attention,
## si il n'y a pas de `.`, ce sont des nombres entiers. Ceci n'est pas un
## problème car python traduit automatiquement les entiers en nombres flottants
## lorsque cela est nécessaire.
12.0, 12.45 + 3, -1.42e10 + 12.7e-5

## Les nombres flottants donnent une approximation des nombres réels,
## mais il n'est pas possible de représenter tous les nombres réels à l'aide des
## nombres flottants. On relève trois limitations:
## * Les nombres très très grands ne sont pas représentables et deviennent infini:
1e310
## * Les nombres très très petit deviennent nuls:
1e-350
## * Les nombres contiennent un nombre limité de chiffre après la virgule:
 (1e-15 + 1) - 1, (1e-16 + 1) - 1

## Les fonctions habituelles `+`, `-`, `*` et `/` sont disponibles sur les nombres
## flottant, ainsi que la valeur absolue: `abs(x)`. Attention à ne pas confondre
## * la division euclidienne `//` qui n'a de sens que sur les nombres entiers et
## produit toujours un nombre entier et
## * la division `flottante` qui produit toujours un nomùbre flottant.
3.4+abs(-4), 3/4, 3//4, 3.2*1e-4-5.42+(2*7.4/7.1)

## Pour utiliser les fonctions comme $sin(x)$, $\sqrt{x}$, mais aussi le nombre
## $\pi$, il faut les rendre visibles pour avoir le droit de s'en servir. Voici
## comment on fait:
from math import sin,cos,asin,acos,sqrt,pi
sqrt(2),sin(pi),sin(pi/2),asin(sin(pi))

## la ligne `from ...` se place en général en début de fichier python. Il n'est pas
## nécessaire de la répéter à chaque utilisation d'une fonction.

## On peut utiliser les comparaisons `==`, `>`, `>=`, etc. sur les flottants
## comme sur les entiers. Mais attention, quelque-chose qui vaut $0$ en math, ne
## vaut en général par $0$ en python, à cause des _erreurs d'arrondis_ liées au
## nombre limité de chiffres après la virgule. Voici un exemple:
from math import sqrt
x = sqrt(2)
y = x*x - 2
y == 0

## En math, on a $y = (\sqrt{2})^2 - 2 = 0$ et la dernière ligne devrait
## renvoyer faux. En python $y$ est très petit mais n'est pas nul.

## Les séquences
## -------------

## Les _séquences_ permettent de stocker dans une variable plusieurs valeurs et
## pas juste une seule. Cela est nécessaire, par exemple pour stocker toutes les
## notes d'un élève, les températures journalières pendant une certaine période,
## etc.

## Les séquences sont aussi appelées _listes_ ou _tableaux_. Attention: presque
## tous les langages de programmation en dehors de python font une distinction
## subtile entre listes et tableaux. En python, on ne fait pas la différence et on
## va plutôt parler de séquence.

## On définit une séquence ainsi:
[], [1, 7, 42, -12, 52, 4]

## `[]` représente la séquence vide et `[1, 7, 42, -12, 52, 4]` une séquence avec
## 6 nombres entiers.

## Comme pour les entiers ou les flottants, une séquence peu être la valeur
## d'une variable:
l = [15, 6, 12.0, 7, 14, 25]
l
## Voici les opérations de base que l'on va utiliser sur une séquence:
## * accès à une des valeurs: `l[i]` (remarque `l[0]` est la première valeur de
## la séquence):
l[0], l[1], l[2]
## * modification d'une des valeurs:
l[3] = 73
l
## * ajout d'une valeur à la fin d'une séquence:
l.append(42)
l
## * longueur de la séquence:
len(l)

## Pour vraiment tirer bénéfices des séquences, il faut utiliser des boucles
## `for`. Des exemples sont disponibles à la fin de la section correspondante.

## Les chaînes de caractères
## -------------------------

## _Les chaînes de caractères_ permettent de représenter du texte en python.
## On peut les écrire de trois manières en python:
str1 = "l'été sera chaud"
str2 = 'le titre est "cours de python"'
str3 = """une chaîne sur
plusieurs
lignes"""
print(str1,str2,str3)

## Ces trois manières existent pour permettent de gérer les apostrophes, les
## guillemmets et les saut à la ligne dans les textes.

## On peut manipuler les chaînes de caractère de la manière suivante:
## * `str[i]` pour accéder au caractère à la position `i` (`str[0]` pour le premier
## caractère)
str3[3]
## * `str[i:j]` pour accéder aux caractères entre la position `i` et la position `j-1`
str3[3:7]
## * `len(str)` pour connaître le longueur d'une séquence
len(str3)
## * `str1 + str2` pour fabriquer une nouvelle séquence ne mettant deux ou plusieurs séquences bout à bout:
print(str1 + str2 + str3)

## Attention: il n'est pas possible de modifier une séquence comme on modifie un
## tableau. On parle de donnée _immutable_. `str3[3] = 'x'` est interdit et
## produit une erreur.
str[3] = 'x'

## La boucle ``for``
## --------------

## La boucle ``for`` va répéter un bloc pour tous les éléments d'une séquence en changeant les valeurs
## d'une variable de boucle. Par exemple, la boucle suivante affiche tous les entiers de $0$ à $10$

for i in [0,1,2,3,4,5,6,7,8,9,10]:
    print(i)

## Pour simplifier beaucoup de boucle, ``range(n)`` produit la séquence des entiers de $0$ à $n-1$ (attention,
## j'ai bien écrit $n-1$) et ``range(a,b)`` produit la séquence des entiers de $a$ à $b-1$. En fait, ``range`` ne
## produit pas exactement une séquence, mais ce qui produit ``range`` convient parfaitement pour les boucles
## ``for``. Ainsi on peut simplifier la boucle précédente en:

for i in range(1,11):
    print(i)

## Rappel, les blocs d'une ligne peuvent se mettre sur la même ligne que les «``:``»:

for i in range(1,11): print(i)

## Les boucles `for` sont très utiles en conjonction avec les tableaux. Voici un
## exemple: le calcul des la moyenne des valeurs dans une séquence.
def moyenne_sequence(l):
    somme = 0
    for i in range(0,len(l)):
    	somme = somme + l[i]
    return somme/len(l)
print(moyenne_sequence([10,10,10]))
print(moyenne_sequence([8,10,14,15,16]))

## La boucle ``while``
## ----------------

## La boucle ``while`` prend une condition et execure le bloc qui suit tant que la condition reste vraie.
## par exemple la boucle suivante affiche aussi les entiers entre $0$ et $10$:

i = 0
while i < 11:
      print(i)
      i = i + 1

## Notez que l'on doit déclarer la variable de boucle (ici ``i``) avant le ``while`` et
## changer la variable ``i`` dans la boucle. Sinon le programme ne s'arrêtera jamais, car la condition
## restera toujours vrai.